from pathlib import Path
import requests
from hashlib import md5
from shutil import rmtree
from sirhurt.roblox import RobloxProcess
from .constants import APP_PATHS


class Exploit:
    """
    Wrapper for SirHurt, currently it does not support downloading official SirHurt GUI.

    Based on my old SirHurtAPI C# code.
    """

    LATEST_DOWNLOAD_URL = "https://sirhurt.net/asshurt/update/v4/fetch_version.php"
    LATEST_HASH_URL = "https://sirhurt.net/asshurt/update/v4/fetch_sirhurt_version.php"

    def __init__(self):
        self._session: requests.ClientSession = requests.Session()
        self._data: Path = Path(APP_PATHS.user_data_dir)
        self._workspace: Path = self._data.joinpath("workspace")
        self._cache: Path = Path(APP_PATHS.user_cache_dir)
        self._data.mkdir(parents=True, exist_ok=True)
        self._cache.mkdir(parents=True, exist_ok=True)
        self._workspace.mkdir(exist_ok=True)
        self._dll_path = self._data.joinpath("SirHurt.dll")

    def get_latest_url(self) -> str:
        """
        Get the latest DLL download URL.

        Returns: Download URL for the latest DLL.
        """
        rsp = self._session.get(self.LATEST_DOWNLOAD_URL)
        rsp.raise_for_status()
        return rsp.text

    def get_latest_md5(self) -> str:
        """
        Get the latest SirHurt MD5 hash.

        Returns: MD5 hash of the latest SirHurt version.
        """
        rsp = self._session.get(self.LATEST_HASH_URL)
        rsp.raise_for_status()
        return rsp.text

    def get_current_md5(self) -> str:
        if not self._dll_path.is_file():
            raise FileNotFoundError("Exploit DLL isn't downloaded.")
        return md5(self._dll_path.read_bytes()).hexdigest()

    def is_update_available(self) -> bool:
        if not self._dll_path.is_file():
            return True
        if self.get_current_md5() != self.get_latest_md5():
            return True
        return False

    def download_dll(self):
        """
        Download the current SirHurt.dll
        """
        url = self.get_latest_url()
        rsp = self._session.get(url)
        rsp.raise_for_status()
        with self._dll_path.open("wb") as f:
            for chunk in rsp.iter_content(chunk_size=1024):
                f.write(chunk)
        return self._dll_path

    def inject(self, roblox: RobloxProcess):
        if not self._dll_path.is_file():
            raise FileNotFoundError("Exploit DLL isn't downloaded.")
        name = f"{roblox._pid}-{roblox._wine_pid}"
        # Symlink DLL, allowing multiple instances
        tmp_path = self._cache.joinpath(f"rbx/{name}/")
        if tmp_path.is_dir():
            rmtree(tmp_path)
        tmp_path.mkdir(exist_ok=True, parents=True)
        tmp_dll = tmp_path.joinpath("SirHurt.dll")
        if tmp_dll.is_file():
            tmp_dll.unlink()
        tmp_dll.symlink_to(self._dll_path)

        def cleanup():
            rmtree(tmp_path)

        roblox.inject(tmp_dll, self._workspace, cleanup)
